diff -rNpU8 a/src/http/modules/ngx_http_rewrite_module.c b/src/http/modules/ngx_http_rewrite_module.c
--- a/src/http/modules/ngx_http_rewrite_module.c	2010-06-18 16:15:20.000000000 +0100
+++ b/src/http/modules/ngx_http_rewrite_module.c	2010-09-18 23:54:34.000000000 +0100
@@ -1,48 +1,33 @@
 
 /*
  * Copyright (C) Igor Sysoev
+ *
+ * Note : this file has been patched by the Nginx Development Kit
  */
 
 
 #include <ngx_config.h>
 #include <ngx_core.h>
 #include <ngx_http.h>
 
 
-typedef struct {
-    ngx_array_t  *codes;        /* uintptr_t */
-
-    ngx_uint_t    stack_size;
-
-    ngx_flag_t    log;
-    ngx_flag_t    uninitialized_variable_warn;
-} ngx_http_rewrite_loc_conf_t;
-
-
 static void *ngx_http_rewrite_create_loc_conf(ngx_conf_t *cf);
 static char *ngx_http_rewrite_merge_loc_conf(ngx_conf_t *cf,
     void *parent, void *child);
 static ngx_int_t ngx_http_rewrite_init(ngx_conf_t *cf);
 static char *ngx_http_rewrite(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
 static char *ngx_http_rewrite_return(ngx_conf_t *cf, ngx_command_t *cmd,
     void *conf);
 static char *ngx_http_rewrite_break(ngx_conf_t *cf, ngx_command_t *cmd,
     void *conf);
-static char *ngx_http_rewrite_if(ngx_conf_t *cf, ngx_command_t *cmd,
-    void *conf);
-static char * ngx_http_rewrite_if_condition(ngx_conf_t *cf,
-    ngx_http_rewrite_loc_conf_t *lcf);
-static char *ngx_http_rewrite_variable(ngx_conf_t *cf,
-    ngx_http_rewrite_loc_conf_t *lcf, ngx_str_t *value);
 static char *ngx_http_rewrite_set(ngx_conf_t *cf, ngx_command_t *cmd,
     void *conf);
-static char * ngx_http_rewrite_value(ngx_conf_t *cf,
-    ngx_http_rewrite_loc_conf_t *lcf, ngx_str_t *value);
+
 
 
 static ngx_command_t  ngx_http_rewrite_commands[] = {
 
     { ngx_string("rewrite"),
       NGX_HTTP_SRV_CONF|NGX_HTTP_SIF_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF
                        |NGX_CONF_TAKE23,
       ngx_http_rewrite,
@@ -174,17 +159,17 @@ ngx_http_rewrite_handler(ngx_http_reques
     if (r->err_status == 0) {
         return e->status;
     }
 
     return r->err_status;
 }
 
 
-static ngx_int_t
+ngx_int_t
 ngx_http_rewrite_var(ngx_http_request_t *r, ngx_http_variable_value_t *v,
     uintptr_t data)
 {
     ngx_http_variable_t          *var;
     ngx_http_core_main_conf_t    *cmcf;
     ngx_http_rewrite_loc_conf_t  *rlcf;
 
     rlcf = ngx_http_get_module_loc_conf(r, ngx_http_rewrite_module);
@@ -506,17 +491,17 @@ ngx_http_rewrite_break(ngx_conf_t *cf, n
     }
 
     *code = ngx_http_script_break_code;
 
     return NGX_CONF_OK;
 }
 
 
-static char *
+char *
 ngx_http_rewrite_if(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
 {
     ngx_http_rewrite_loc_conf_t  *lcf = conf;
 
     void                         *mconf;
     char                         *rv;
     u_char                       *elts;
     ngx_uint_t                    i;
@@ -622,17 +607,17 @@ ngx_http_rewrite_if(ngx_conf_t *cf, ngx_
     /* the code array belong to parent block */
 
     nlcf->codes = NULL;
 
     return NGX_CONF_OK;
 }
 
 
-static char *
+char *
 ngx_http_rewrite_if_condition(ngx_conf_t *cf, ngx_http_rewrite_loc_conf_t *lcf)
 {
     u_char                        *p;
     size_t                         len;
     ngx_str_t                     *value;
     ngx_uint_t                     cur, last;
     ngx_regex_compile_t            rc;
     ngx_http_script_code_pt       *code;
@@ -842,17 +827,17 @@ ngx_http_rewrite_if_condition(ngx_conf_t
 
     ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                        "invalid condition \"%V\"", &value[cur]);
 
     return NGX_CONF_ERROR;
 }
 
 
-static char *
+char *
 ngx_http_rewrite_variable(ngx_conf_t *cf, ngx_http_rewrite_loc_conf_t *lcf,
     ngx_str_t *value)
 {
     ngx_int_t                    index;
     ngx_http_script_var_code_t  *var_code;
 
     value->len--;
     value->data++;
@@ -943,17 +928,17 @@ ngx_http_rewrite_set(ngx_conf_t *cf, ngx
 
     vcode->code = ngx_http_script_set_var_code;
     vcode->index = (uintptr_t) index;
 
     return NGX_CONF_OK;
 }
 
 
-static char *
+char *
 ngx_http_rewrite_value(ngx_conf_t *cf, ngx_http_rewrite_loc_conf_t *lcf,
     ngx_str_t *value)
 {
     ngx_int_t                              n;
     ngx_http_script_compile_t              sc;
     ngx_http_script_value_code_t          *val;
     ngx_http_script_complex_value_code_t  *complex;
 
diff -rNpU8 a/src/http/modules/ngx_http_rewrite_module.h b/src/http/modules/ngx_http_rewrite_module.h
--- a/src/http/modules/ngx_http_rewrite_module.h	1970-01-01 01:00:00.000000000 +0100
+++ b/src/http/modules/ngx_http_rewrite_module.h	2010-09-19 00:51:27.000000000 +0100
@@ -0,0 +1,45 @@
+
+/*
+ * Copyright (C) Marcus Clyne
+ *
+ * Note : this file has been created by the Nginx Development Kit using
+ * some code from ngx_http_rewrite_module.c
+ */
+
+
+#ifndef _NGX_HTTP_REWRITE_H_INCLUDED_
+#define _NGX_HTTP_REWRITE_H_INCLUDED_
+
+#include <ngx_config.h>
+#include <ngx_core.h>
+#include <ngx_http.h>
+
+
+extern  ngx_module_t  ngx_http_rewrite_module;
+
+
+typedef struct {
+    ngx_array_t  *codes;        /* uintptr_t */
+
+    ngx_uint_t    stack_size;
+
+    ngx_flag_t    log;
+    ngx_flag_t    uninitialized_variable_warn;
+} ngx_http_rewrite_loc_conf_t;
+
+
+char *
+ngx_http_rewrite_if(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
+char *
+ngx_http_rewrite_if_condition(ngx_conf_t *cf, ngx_http_rewrite_loc_conf_t *lcf);
+char *
+ngx_http_rewrite_variable(ngx_conf_t *cf, ngx_http_rewrite_loc_conf_t *lcf,
+    ngx_str_t *value);
+char *
+ngx_http_rewrite_value(ngx_conf_t *cf, ngx_http_rewrite_loc_conf_t *lcf,
+    ngx_str_t *value);
+ngx_int_t
+ngx_http_rewrite_var(ngx_http_request_t *r, ngx_http_variable_value_t *v,
+    uintptr_t data);
+
+#endif
diff -rNpU8 a/src/http/ngx_http.h b/src/http/ngx_http.h
--- a/src/http/ngx_http.h	2010-06-15 16:13:34.000000000 +0100
+++ b/src/http/ngx_http.h	2010-09-18 23:49:54.000000000 +0100
@@ -27,16 +27,17 @@ typedef u_char *(*ngx_http_log_handler_p
 #include <ngx_http_variables.h>
 #include <ngx_http_request.h>
 #include <ngx_http_upstream.h>
 #include <ngx_http_upstream_round_robin.h>
 #include <ngx_http_config.h>
 #include <ngx_http_busy_lock.h>
 #include <ngx_http_script.h>
 #include <ngx_http_core_module.h>
+#include <ngx_http_rewrite_module.h>
 
 #if (NGX_HTTP_CACHE)
 #include <ngx_http_cache.h>
 #endif
 #if (NGX_HTTP_SSI)
 #include <ngx_http_ssi_filter_module.h>
 #endif
 #if (NGX_HTTP_SSL)
diff -rNpU8 a/src/http/ngx_http_script.c b/src/http/ngx_http_script.c
--- a/src/http/ngx_http_script.c	2010-09-02 15:37:16.000000000 +0100
+++ b/src/http/ngx_http_script.c	2010-09-19 01:41:22.000000000 +0100
@@ -21,19 +21,17 @@ static ngx_int_t ngx_http_script_add_cap
      ngx_uint_t n);
 #endif
 static ngx_int_t
      ngx_http_script_add_full_name_code(ngx_http_script_compile_t *sc);
 static size_t ngx_http_script_full_name_len_code(ngx_http_script_engine_t *e);
 static void ngx_http_script_full_name_code(ngx_http_script_engine_t *e);
 
 
-#define ngx_http_script_exit  (u_char *) &ngx_http_script_exit_code
-
-static uintptr_t ngx_http_script_exit_code = (uintptr_t) NULL;
+uintptr_t ngx_http_script_exit_code = (uintptr_t) NULL;
 
 
 void
 ngx_http_script_flush_complex_value(ngx_http_request_t *r,
     ngx_http_complex_value_t *val)
 {
     ngx_uint_t *index;
 
diff -rNpU8 a/src/http/ngx_http_script.h b/src/http/ngx_http_script.h
--- a/src/http/ngx_http_script.h	2010-09-02 15:37:16.000000000 +0100
+++ b/src/http/ngx_http_script.h	2010-09-19 01:41:38.000000000 +0100
@@ -8,16 +8,21 @@
 #define _NGX_HTTP_SCRIPT_H_INCLUDED_
 
 
 #include <ngx_config.h>
 #include <ngx_core.h>
 #include <ngx_http.h>
 
 
+#define ngx_http_script_exit  (u_char *) &ngx_http_script_exit_code
+
+extern uintptr_t ngx_http_script_exit_code;
+
+
 typedef struct {
     u_char                     *ip;
     u_char                     *pos;
     ngx_http_variable_value_t  *sp;
 
     ngx_str_t                   buf;
     ngx_str_t                   line;
 
